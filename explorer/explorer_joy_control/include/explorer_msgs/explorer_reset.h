// Generated by gencpp from file explorer_msgs/explorer_reset.msg
// DO NOT EDIT!


#ifndef EXPLORER_MSGS_MESSAGE_EXPLORER_RESET_H
#define EXPLORER_MSGS_MESSAGE_EXPLORER_RESET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace explorer_msgs
{
template <class ContainerAllocator>
struct explorer_reset_
{
  typedef explorer_reset_<ContainerAllocator> Type;

  explorer_reset_()
    : reset_arm(false)
    , reset_camera(false)
    , reset_paws(false)  {
    }
  explorer_reset_(const ContainerAllocator& _alloc)
    : reset_arm(false)
    , reset_camera(false)
    , reset_paws(false)  {
  (void)_alloc;
    }



   typedef uint8_t _reset_arm_type;
  _reset_arm_type reset_arm;

   typedef uint8_t _reset_camera_type;
  _reset_camera_type reset_camera;

   typedef uint8_t _reset_paws_type;
  _reset_paws_type reset_paws;




  typedef boost::shared_ptr< ::explorer_msgs::explorer_reset_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::explorer_msgs::explorer_reset_<ContainerAllocator> const> ConstPtr;

}; // struct explorer_reset_

typedef ::explorer_msgs::explorer_reset_<std::allocator<void> > explorer_reset;

typedef boost::shared_ptr< ::explorer_msgs::explorer_reset > explorer_resetPtr;
typedef boost::shared_ptr< ::explorer_msgs::explorer_reset const> explorer_resetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::explorer_msgs::explorer_reset_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::explorer_msgs::explorer_reset_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace explorer_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'explorer_msgs': ['/home/hdh/catkin_ws/src/explorer/explorer_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::explorer_msgs::explorer_reset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::explorer_msgs::explorer_reset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::explorer_msgs::explorer_reset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::explorer_msgs::explorer_reset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::explorer_msgs::explorer_reset_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::explorer_msgs::explorer_reset_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::explorer_msgs::explorer_reset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42830a8612208acb36162488127e6aa7";
  }

  static const char* value(const ::explorer_msgs::explorer_reset_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42830a8612208acbULL;
  static const uint64_t static_value2 = 0x36162488127e6aa7ULL;
};

template<class ContainerAllocator>
struct DataType< ::explorer_msgs::explorer_reset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "explorer_msgs/explorer_reset";
  }

  static const char* value(const ::explorer_msgs::explorer_reset_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::explorer_msgs::explorer_reset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool reset_arm\n\
bool reset_camera\n\
bool reset_paws\n\
";
  }

  static const char* value(const ::explorer_msgs::explorer_reset_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::explorer_msgs::explorer_reset_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reset_arm);
      stream.next(m.reset_camera);
      stream.next(m.reset_paws);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct explorer_reset_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::explorer_msgs::explorer_reset_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::explorer_msgs::explorer_reset_<ContainerAllocator>& v)
  {
    s << indent << "reset_arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_arm);
    s << indent << "reset_camera: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_camera);
    s << indent << "reset_paws: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_paws);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXPLORER_MSGS_MESSAGE_EXPLORER_RESET_H
